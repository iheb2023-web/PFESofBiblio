stages:
  - build
  - test
  - build-sonar
  - security_scan
  - sonarqube-vulnerability-report
  - analyze
  - package
  - deploy

image: registry.hub.docker.com/library/maven:latest

variables:
  MYSQL_DATABASE: sofbiblio_db
  MYSQL_ROOT_PASSWORD: root
  SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/sofbiblio_db
  SPRING_DATASOURCE_USERNAME: root
  SPRING_DATASOURCE_PASSWORD: root
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  SONAR_PROJECT_KEY: "mohamedelhedi.hamdi_sofbiblio"

services:
  - name: mysql:5.7
    alias: mysql

# -------- BUILD DU BACKEND --------
build_backend:
  stage: build
  script:
    - cd backend
    - mvn clean install
  artifacts:
    paths:
      - backend/target/*.jar
      - backend/pom.xml
    expire_in: 1 week
  only:
    - main

# -------- BUILD DU FRONTEND --------
build_frontend:
  stage: build
  image: node:16
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
      - frontend/package.json
    expire_in: 1 week
  only:
    - main

# -------- BUILD DE L'APPLICATION MOBILE (FLUTTER) --------
# Job de test
test_job:
  stage: test
  script:
    - cd backend
    - echo "Exécution des tests sur $CI_COMMIT_BRANCH"
    - mvn test -e -X
  artifacts:
    when: always
    paths:
      - target/surefire-reports/
      - target/jacoco.exec
      - target/*.log
      - target/site/jacoco/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  coverage: '/Total.*?([0-9]{1,3})%/'

# -------- ANALYSE SONARQUBE --------
build-sonar:
  stage: build-sonar
  image: registry.hub.docker.com/sonarsource/sonar-scanner-cli:latest
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
  script:
    - cd backend
    - mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.token=$SONAR_TOKEN
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
  allow_failure: true
  dependencies:
    - build_backend
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'

# -------- RAPPORT DE VULNÉRABILITÉS SONARQUBE --------
sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  image: alpine:latest
  script:
    - apk add curl
    - curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=${SONAR_PROJECT_KEY}&branch=${CI_COMMIT_BRANCH}" -o gl-sast-sonar-report.json
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json

# -------- SCAN DE SÉCURITÉ AVEC GITLEAKS --------
security_scan:
  stage: security_scan
  image: registry.hub.docker.com/zricethezav/gitleaks:latest
  script:
    - gitleaks detect --source . -v --report-path gitleaks-report.json --exit-code 0
  artifacts:
    paths:
      - gitleaks-report.json
    expire_in: 1 week
  only:
    - main

# -------- SCAN DES VULNÉRABILITÉS AVEC TRIVY --------
security_scan_trivy:
  stage: security_scan
  image: aquasec/trivy:latest
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "Scan de sécurité pour validation"
    - trivy fs --severity HIGH,CRITICAL backend/pom.xml || echo "Aucune vulnérabilité critique trouvée dans pom.xml"
    - trivy fs --severity HIGH,CRITICAL frontend/package.json || echo "Aucune vulnérabilité critique trouvée dans package.json"
    - trivy fs --severity HIGH,CRITICAL backend/target/*.jar || echo "Scan JAR terminé"
    - trivy fs --severity HIGH,CRITICAL frontend/dist/ || echo "Scan dist terminé"
  allow_failure: true
  only:
    - main

# -------- SCAN DES IMAGES DOCKER AVEC TRIVY --------
security_scan_images:
  stage: package
  image: aquasec/trivy:latest
  dependencies:
    - docker_build_backend
    - docker_build_frontend
  script:
    - echo "Scan de sécurité des images Docker"
    - trivy image --input backend/image.tar --severity HIGH,CRITICAL --format table || echo "Scan de l'image backend terminé"
    - trivy image --input frontend/image.tar --severity HIGH,CRITICAL --format table || echo "Scan de l'image frontend terminé"
  allow_failure: true
  only:
    - main

# -------- ANALYSE DES MÉTRIQUES --------
analyze_metrics:
  stage: analyze
  image: alpine:latest
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "Analyse des métriques de build"
    - du -sh backend/target/*.jar > metrics.txt
    - du -sh frontend/dist/ >> metrics.txt
    - cat metrics.txt
  artifacts:
    paths:
      - metrics.txt
    expire_in: 1 week
  only:
    - main

# -------- PRÉPARATION DES FICHIERS --------
package_artifacts:
  stage: package
  image: alpine:latest
  dependencies:
    - build_backend
    - build_frontend
  script:
    - mkdir -p release
    - cp backend/target/*.jar release/backend.jar
    - cp -r frontend/dist/ release/frontend
    - ls -lhR release/
  artifacts:
    paths:
      - release/
    expire_in: 1 week
  only:
    - main

# -------- CONSTRUCTION DE L'IMAGE DOCKER POUR LE BACKEND AVEC KANIKO --------
docker_build_backend:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  dependencies:
    - build_backend
  script:
    - cd backend
    - /kaniko/executor --context $CI_PROJECT_DIR/backend --dockerfile $CI_PROJECT_DIR/backend/Dockerfile --no-push --destination my-spring-boot-app:$CI_COMMIT_SHA --tar-path image.tar
  artifacts:
    paths:
      - backend/image.tar
    expire_in: 1 week
  only:
    - main

# -------- CONSTRUCTION DE L'IMAGE DOCKER POUR LE FRONTEND AVEC KANIKO --------
docker_build_frontend:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  dependencies:
    - build_frontend
  script:
    - cd frontend
    - /kaniko/executor --context $CI_PROJECT_DIR/frontend --dockerfile $CI_PROJECT_DIR/frontend/Dockerfile --no-push --destination my-frontend-app:$CI_COMMIT_SHA --tar-path image.tar
  artifacts:
    paths:
      - frontend/image.tar
    expire_in: 1 week
  only:
    - main

# -------- DÉPLOIEMENT (SIMULATION) --------
deploy:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_backend
    - build_frontend
  script:
    - echo "Déploiement simulé pour validation"
    - ls -lh backend/target/*.jar
    - ls -lhR frontend/dist/
    - echo "Déploiement du backend, frontend et Flutter terminé avec succès"
  only:
    - main